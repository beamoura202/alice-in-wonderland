/**
 * üéµ Audio Progress Bar Controller - UNIVERSAL
 * Controla a barra de progresso sincronizada com √°udio
 * 
 * Funciona automaticamente em TODOS os cap√≠tulos:
 * - Detecta todos os elementos <audio> na p√°gina
 * - Sincroniza a barra de progresso automaticamente
 * - Para outros √°udios quando um novo inicia
 * - N√£o precisa de configura√ß√£o espec√≠fica por cap√≠tulo
 * 
 * Compat√≠vel com: cap1.html, cap2.html, cap3.html, etc.
 */

class AudioProgressBar {
    constructor() {
        this.progressBar = document.getElementById('barraProgresso');
        this.barraContainer = document.getElementById('barra');
        this.currentAudio = null;
        this.isPlaying = false;
        this.updateInterval = null;
        this.lastLoggedProgress = -1; // Para controlar o debug
        this.audioElements = []; // Array para guardar todos os √°udios
        this.isCurrentlyInChapter = false; // Estado atual de chapter
        this.scrollThrottleTimeout = null; // Throttle para scroll
        
        // Debug: verificar elementos
        console.log('üîç DEBUG: progressBar encontrado:', !!this.progressBar);
        console.log('üîç DEBUG: barraContainer encontrado:', !!this.barraContainer);
        
        // Bind methods to maintain context
        this.updateProgress = this.updateProgress.bind(this);
        this.onAudioEnd = this.onAudioEnd.bind(this);
        this.onAudioPause = this.onAudioPause.bind(this);
        this.onAudioPlay = this.onAudioPlay.bind(this);
        
        // Verifica se deve ocultar a barra em p√°ginas de chapters
        this.checkIfChapterPage();
        
        // Adiciona listener para detectar mudan√ßas de sec√ß√£o durante scroll
        window.addEventListener('scroll', () => {
            this.handleScrollChange();
        });
        
        // Verifica√ß√£o peri√≥dica para garantir que a barra s√≥ aparece com √°udio tocando
        setInterval(() => {
            this.checkAudioState();
        }, 1000); // Verifica a cada segundo
        
        // Inicializa o sistema de detec√ß√£o autom√°tica
        this.setupAudioDetection();
    }

    /**
     * Verifica se estamos numa sec√ß√£o de chapter onde a barra n√£o deve aparecer
     */
    checkIfChapterPage() {
        const currentPage = window.location.pathname.toLowerCase();
        
        // Verifica se estamos numa sec√ß√£o de chapter numerado (chapter1, chapter2, chapter3, etc.)
        const chapterSections = document.querySelectorAll('section[id^="chapter"]');
        console.log('üîç Sec√ß√µes chapter encontradas:', chapterSections.length);
        
        let isInChapterSection = false;
        
        chapterSections.forEach(section => {
            const rect = section.getBoundingClientRect();
            const isVisible = rect.top <= window.innerHeight && rect.bottom >= 0;
            console.log(`üìê Sec√ß√£o ${section.id}:`, {
                top: rect.top,
                bottom: rect.bottom,
                windowHeight: window.innerHeight,
                isVisible: isVisible
            });
            if (isVisible) {
                isInChapterSection = true;
                console.log('üìñ Sec√ß√£o de chapter vis√≠vel detectada:', section.id);
            }
        });
        
        console.log('üîç DEBUG checkIfChapterPage:');
        console.log('  - URL:', currentPage);
        console.log('  - Em sec√ß√£o chapter?', isInChapterSection);
        console.log('  - Resultado final:', isInChapterSection);
        
        if (isInChapterSection) {
            console.log('üìñ Sec√ß√£o chapter detectada - barra de progresso desativada');
            if (this.barraContainer) {
                this.barraContainer.style.display = 'none !important';
                this.barraContainer.style.opacity = '0';
            }
            return true;
        }
        
        console.log('‚úÖ N√£o √© sec√ß√£o de chapter - barra de progresso permitida');
        return false;
    }

    /**
     * Lida com mudan√ßas de scroll para detectar se entramos/sa√≠mos de sec√ß√µes chapter
     */
    handleScrollChange() {
        // Throttle para n√£o executar muito frequentemente
        if (this.scrollThrottleTimeout) return;
        
        this.scrollThrottleTimeout = setTimeout(() => {
            this.scrollThrottleTimeout = null;
            
            console.log('üîÑ Verificando scroll change...');
            
            // Verifica se mudamos o estado de chapter
            const wasInChapter = this.isCurrentlyInChapter;
            const isInChapter = this.checkIfChapterPage();
            
            if (wasInChapter !== isInChapter) {
                console.log('üîÑ Mudan√ßa de estado chapter detectada:', wasInChapter, '->', isInChapter);
                
                // Se sa√≠mos de um chapter e h√° √°udio tocando, mostra a barra
                if (!isInChapter && this.currentAudio && !this.currentAudio.paused) {
                    console.log('üîÑ Saiu de chapter com √°udio tocando - mostrando barra');
                    this.forceShowProgressBar();
                }
                // Se entramos num chapter, oculta a barra
                else if (isInChapter) {
                    console.log('üîÑ Entrou em chapter - ocultando barra');
                    this.hideProgressBar();
                }
            }
            
            this.isCurrentlyInChapter = isInChapter;
        }, 50); // Reduzido para 50ms para ser mais responsivo
    }

    /**
     * Verifica o estado atual dos √°udios e oculta a barra se nenhum estiver tocando
     */
    checkAudioState() {
        const hasPlayingAudio = this.currentAudio && !this.currentAudio.paused;
        const isBarVisible = this.barraContainer && 
                            this.barraContainer.style.display !== 'none' && 
                            this.barraContainer.style.opacity !== '0';
        
        // Se a barra est√° vis√≠vel mas n√£o h√° √°udio tocando, oculta
        if (isBarVisible && !hasPlayingAudio) {
            console.log('üîç Verifica√ß√£o peri√≥dica: Nenhum √°udio tocando - ocultando barra');
            this.hideProgressBar();
        }
    }

    /**
     * Configura a detec√ß√£o autom√°tica de √°udios
     */
    setupAudioDetection() {
        // Detecta automaticamente todos os elementos de √°udio na p√°gina
        const allAudioElements = document.querySelectorAll('audio');
        
        if (allAudioElements.length === 0) {
            console.log('Nenhum elemento de √°udio encontrado na p√°gina');
            return;
        }
        
        allAudioElements.forEach(audioElement => {
            this.audioElements.push(audioElement);
            
            // Adiciona listeners para detectar quando o √°udio come√ßa
            audioElement.addEventListener('play', () => this.onAudioPlay(audioElement));
            audioElement.addEventListener('pause', this.onAudioPause);
            audioElement.addEventListener('ended', this.onAudioEnd);
            
            // Listener adicional para debug
            audioElement.addEventListener('ended', () => {
                console.log('üîö Evento ENDED disparado para √°udio:', audioElement.id || audioElement.src);
                console.log('üîö currentTime:', audioElement.currentTime);
                console.log('üîö duration:', audioElement.duration);
            });
            
            const audioId = audioElement.id || audioElement.src.split('/').pop();
            console.log(`√Åudio ${audioId} registado para detec√ß√£o autom√°tica`);
        });
        
        console.log(`${this.audioElements.length} √°udios registados para detec√ß√£o autom√°tica em todos os cap√≠tulos`);
    }

    /**
     * Handler chamado quando qualquer √°udio come√ßa a tocar
     */
    onAudioPlay(audioElement) {
        const audioId = audioElement.id || audioElement.src.split('/').pop() || '√°udio desconhecido';
        console.log(`üéµ √Åudio detectado: ${audioId}`);
        
        // Para todos os outros √°udios
        this.audioElements.forEach(audio => {
            if (audio !== audioElement && !audio.paused) {
                audio.pause();
            }
        });
        
        // Define o √°udio atual ANTES de tentar mostrar a barra
        this.currentAudio = audioElement;
        
        // For√ßa mostrar a barra (sem verificar se h√° √°udio tocando)
        this.forceShowProgressBar();
        
        // Inicia a barra de progresso para este √°udio
        this.startProgress(audioElement);
    }

    /**
     * Mostra a barra de progresso
     */
    showProgressBar() {
        console.log('üîç Tentando mostrar barra de progresso...');
        console.log('üîç barraContainer:', this.barraContainer);
        
        // Verifica se h√° algum √°udio tocando
        const hasPlayingAudio = this.currentAudio && !this.currentAudio.paused;
        console.log('üîç √Åudio tocando?', hasPlayingAudio);
        
        if (!hasPlayingAudio) {
            console.log('‚ùå Nenhum √°udio tocando - barra n√£o ser√° mostrada');
            this.hideProgressBar();
            return;
        }
        
        const isChapter = this.checkIfChapterPage();
        console.log('üîç isChapterPage:', isChapter);
        
        if (!this.barraContainer) {
            console.error('‚ùå Elemento #barra n√£o encontrado!');
            return;
        }
        
        if (isChapter) {
            console.log('‚ùå P√°gina de chapter - barra n√£o ser√° mostrada');
            return;
        }
        
        // For√ßa a visibilidade com m√∫ltiplos m√©todos
        this.barraContainer.style.display = 'block';
        this.barraContainer.style.opacity = '1';
        this.barraContainer.style.visibility = 'visible';
        this.barraContainer.classList.add('show');
        
        console.log('‚úÖ Display:', this.barraContainer.style.display);
        console.log('‚úÖ Opacity:', this.barraContainer.style.opacity);
        console.log('‚úÖ Classes:', this.barraContainer.className);
        
        console.log('üéµ Barra de progresso vis√≠vel!');
        console.log('üîç Classes atuais:', this.barraContainer.className);
        console.log('üîç Estilo opacity:', this.barraContainer.style.opacity);
        console.log('üîç Estilo display:', this.barraContainer.style.display);
    }

    /**
     * Oculta a barra de progresso
     */
    hideProgressBar() {
        if (this.barraContainer) {
            this.barraContainer.classList.remove('show');
            // For√ßa ocultar com m√∫ltiplos m√©todos
            this.barraContainer.style.display = 'none';
            this.barraContainer.style.opacity = '0';
            this.barraContainer.style.visibility = 'hidden';
            
            console.log('üîá Barra de progresso oculta');
            console.log('üîá Display:', this.barraContainer.style.display);
            console.log('üîá Opacity:', this.barraContainer.style.opacity);
        }
    }

    /**
     * For√ßa mostrar a barra de progresso (sem verifica√ß√µes)
     */
    forceShowProgressBar() {
        console.log('üí™ For√ßando mostrar barra de progresso...');
        
        if (!this.barraContainer) {
            console.error('‚ùå Elemento #barra n√£o encontrado!');
            return;
        }
        
        // Verifica apenas se estamos numa sec√ß√£o chapter
        const isChapter = this.checkIfChapterPage();
        if (isChapter) {
            console.log('‚ùå P√°gina de chapter - barra n√£o ser√° mostrada');
            return;
        }
        
        // For√ßa a visibilidade com m√∫ltiplos m√©todos
        this.barraContainer.style.display = 'block';
        this.barraContainer.style.opacity = '1';
        this.barraContainer.style.visibility = 'visible';
        this.barraContainer.classList.add('show');
        
        console.log('üí™ Barra for√ßada a aparecer!');
        console.log('‚úÖ Display:', this.barraContainer.style.display);
        console.log('‚úÖ Opacity:', this.barraContainer.style.opacity);
    }

    /**
     * Inicia a barra de progresso com um √°udio
     * @param {HTMLAudioElement} audio - Elemento de √°udio
     */
    startProgress(audio) {
        if (!audio || !this.progressBar) {
            console.error('√Åudio ou barra de progresso n√£o encontrados');
            return;
        }

        // Para qualquer progresso anterior (sem ocultar a barra)
        this.resetProgress();

        this.currentAudio = audio;

        // Fun√ß√£o para iniciar quando o √°udio estiver pronto
        const startWhenReady = () => {
            if (audio.duration && !isNaN(audio.duration)) {
                this.isPlaying = true;
                
                // Define a dura√ß√£o da anima√ß√£o CSS (mant√©m para compatibilidade)
                const duration = audio.duration;
                this.progressBar.style.setProperty('--audio-duration', `${duration}s`);

                // Reseta a barra
                this.progressBar.style.width = '0%';

                // Adiciona listeners para eventos do √°udio
                audio.addEventListener('ended', this.onAudioEnd);
                audio.addEventListener('pause', this.onAudioPause);

                // Usa apenas atualiza√ß√£o manual (mais confi√°vel)
                this.startManualUpdate();

                console.log(`Barra de progresso iniciada para √°udio de ${duration.toFixed(2)}s`);
            } else {
                console.log('Aguardando √°udio carregar...');
                // Aguarda um pouco e tenta novamente
                setTimeout(startWhenReady, 100);
            }
        };

        // Se o √°udio j√° tem dura√ß√£o, inicia imediatamente
        if (audio.duration && !isNaN(audio.duration)) {
            startWhenReady();
        } else {
            // Aguarda o √°udio carregar
            audio.addEventListener('loadedmetadata', startWhenReady, { once: true });
            // For√ßa o carregamento se necess√°rio
            audio.load();
        }
    }

    /**
     * Reseta a barra de progresso sem ocult√°-la
     */
    resetProgress() {
        if (!this.progressBar) return;

        this.isPlaying = false;

        // Remove a anima√ß√£o CSS
        this.progressBar.classList.remove('playing');
        
        // Reseta a largura
        this.progressBar.style.width = '0%';

        // Remove listeners do √°udio anterior
        if (this.currentAudio) {
            this.currentAudio.removeEventListener('ended', this.onAudioEnd);
            this.currentAudio.removeEventListener('pause', this.onAudioPause);
            this.currentAudio = null;
        }

        // Para a atualiza√ß√£o manual
        this.stopManualUpdate();

        console.log('Barra de progresso resetada (sem ocultar)');
    }

    /**
     * Para a barra de progresso
     */
    stopProgress() {
        if (!this.progressBar) return;

        this.isPlaying = false;

        // Remove a anima√ß√£o CSS
        this.progressBar.classList.remove('playing');
        
        // Reseta a largura
        this.progressBar.style.width = '0%';

        // Remove listeners do √°udio anterior
        if (this.currentAudio) {
            this.currentAudio.removeEventListener('ended', this.onAudioEnd);
            this.currentAudio.removeEventListener('pause', this.onAudioPause);
            this.currentAudio = null;
        }

        // Para a atualiza√ß√£o manual
        this.stopManualUpdate();

        // Oculta a barra
        this.hideProgressBar();

        console.log('Barra de progresso parada');
    }

    /**
     * Pausa a barra de progresso
     */
    pauseProgress() {
        if (!this.isPlaying) return;

        this.isPlaying = false;
        this.progressBar.style.animationPlayState = 'paused';
        this.stopManualUpdate();

        console.log('Barra de progresso pausada');
    }

    /**
     * Resume a barra de progresso
     */
    resumeProgress() {
        if (this.isPlaying || !this.currentAudio) return;

        this.isPlaying = true;
        this.progressBar.style.animationPlayState = 'running';
        this.startManualUpdate();

        console.log('Barra de progresso resumida');
    }

    /**
     * Atualiza manualmente o progresso
     */
    updateProgress() {
        if (!this.currentAudio || !this.isPlaying || !this.progressBar) {
            return;
        }

        const currentTime = this.currentAudio.currentTime;
        const duration = this.currentAudio.duration;
        
        // Debug: verificar valores
        if (currentTime === 0 && duration === 0) {
            console.log('√Åudio ainda n√£o iniciou...');
            return;
        }
        
        if (duration > 0 && !isNaN(duration)) {
            const progress = (currentTime / duration) * 100;
            this.progressBar.style.width = `${progress}%`;
            
            // Debug a cada 10% de progresso
            if (Math.floor(progress) % 20 === 0 && Math.floor(progress) !== this.lastLoggedProgress) {
                console.log(`Progresso: ${progress.toFixed(1)}% (${currentTime.toFixed(1)}s/${duration.toFixed(1)}s)`);
                this.lastLoggedProgress = Math.floor(progress);
            }
        } else {
            console.log('Dura√ß√£o do √°udio inv√°lida:', duration);
        }
    }

    /**
     * Inicia atualiza√ß√£o manual
     */
    startManualUpdate() {
        this.stopManualUpdate();
        this.updateInterval = setInterval(this.updateProgress, 100); // Atualiza a cada 100ms
    }

    /**
     * Para atualiza√ß√£o manual
     */
    stopManualUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    /**
     * Handler para quando o √°udio termina
     */
    onAudioEnd() {
        console.log('üîö onAudioEnd chamado!');
        this.stopProgress();
        // Oculta a barra quando o √°udio termina
        console.log('üîö √Åudio terminou - ocultando barra');
        this.hideProgressBar();
        
        // For√ßa ocultar com delay para garantir
        setTimeout(() => {
            console.log('üîö For√ßando ocultar barra ap√≥s delay');
            this.hideProgressBar();
        }, 100);
    }

    /**
     * Handler para quando o √°udio √© pausado
     */
    onAudioPause() {
        this.pauseProgress();
        // Oculta a barra quando o √°udio √© pausado
        console.log('‚è∏Ô∏è √Åudio pausado - ocultando barra');
        this.hideProgressBar();
    }

    /**
     * Define a largura da barra manualmente (0-100)
     * @param {number} percentage - Percentagem (0-100)
     */
    setProgress(percentage) {
        if (!this.progressBar) return;
        
        const clampedPercentage = Math.max(0, Math.min(100, percentage));
        this.progressBar.style.width = `${clampedPercentage}%`;
    }

    /**
     * Testa a barra com uma anima√ß√£o de 5 segundos
     */
    testProgress() {
        console.log('Testando barra de progresso...');
        
        if (!this.progressBar) {
            console.error('Barra de progresso n√£o encontrada para teste');
            return;
        }

        // Para qualquer progresso atual
        this.stopProgress();

        // Mostra a barra para o teste
        this.showProgressBar();

        // Teste simples: anima√ß√£o suave com JavaScript
        console.log('Iniciando anima√ß√£o de teste...');
        
        let progress = 0;
        const duration = 5000; // 5 segundos
        const updateInterval = 50; // atualiza a cada 50ms
        const increment = (100 / (duration / updateInterval));
        
        const animate = () => {
            progress += increment;
            if (progress <= 100) {
                this.progressBar.style.width = `${progress}%`;
                console.log(`Progresso: ${progress.toFixed(1)}%`);
                setTimeout(animate, updateInterval);
            } else {
                console.log('Anima√ß√£o de teste conclu√≠da');
                this.progressBar.style.width = '0%';
                // Oculta a barra ap√≥s o teste
                setTimeout(() => this.hideProgressBar(), 1000);
            }
        };
        
        animate();
    }
    /**
     * Teste realista que simula um √°udio real
     */
    testWithRealAudio() {
        console.log('Testando com √°udio real...');
        
        if (this.audioElements.length > 0) {
            // Usa o primeiro √°udio dispon√≠vel
            const audioElement = this.audioElements[0];
            console.log(`Usando √°udio: ${audioElement.id}`);
            
            // Para qualquer √°udio que esteja a tocar
            this.stopAllAudios();
            audioElement.currentTime = 0;
            
            // Reproduz o √°udio (a detec√ß√£o autom√°tica vai cuidar da barra)
            audioElement.play().then(() => {
                console.log('√Åudio iniciado com sucesso');
            }).catch(error => {
                console.error('Erro ao reproduzir √°udio:', error);
            });
        } else {
            console.error('Nenhum elemento de √°udio encontrado na p√°gina');
            // Fallback para teste simples
            this.testProgress();
        }
    }

    /**
     * Para todos os √°udios
     */
    stopAllAudios() {
        this.audioElements.forEach(audio => {
            audio.pause();
            audio.currentTime = 0;
        });
        this.stopProgress();
    }

    /**
     * Reproduz um √°udio espec√≠fico pelo ID ou √≠ndice
     */
    playAudio(audioIdentifier) {
        let audioElement = null;
        
        // Se for um n√∫mero, usa o √≠ndice
        if (typeof audioIdentifier === 'number') {
            audioElement = this.audioElements[audioIdentifier];
        } else {
            // Se for string, procura pelo ID
            audioElement = document.getElementById(audioIdentifier);
        }
        
        if (audioElement) {
            this.stopAllAudios();
            audioElement.play();
            const audioId = audioElement.id || audioElement.src.split('/').pop();
            console.log(`Reproduzindo √°udio: ${audioId}`);
        } else {
            console.error(`√Åudio n√£o encontrado: ${audioIdentifier}`);
        }
    }

    /**
     * Lista todos os √°udios dispon√≠veis
     */
    listAudios() {
        console.log('√Åudios dispon√≠veis na p√°gina:');
        this.audioElements.forEach((audio, index) => {
            const duration = audio.duration ? `${audio.duration.toFixed(1)}s` : 'n√£o carregado';
            const audioId = audio.id || audio.src.split('/').pop();
            const src = audio.src.split('/').slice(-2).join('/'); // Mostra as √∫ltimas 2 partes do caminho
            console.log(`${index + 1}. ${audioId} - ${duration} (${src})`);
        });
        
        if (this.audioElements.length === 0) {
            console.log('Nenhum √°udio encontrado nesta p√°gina');
        }
    }

    /**
     * Teste de debug - for√ßa a barra a aparecer
     */
    forceShowBar() {
        console.log('üîß TESTE: For√ßando barra a aparecer...');
        if (this.barraContainer) {
            this.barraContainer.style.opacity = '1';
            this.barraContainer.classList.add('show');
            console.log('üîß Barra for√ßada a aparecer');
        } else {
            console.error('üîß Elemento #barra n√£o encontrado!');
        }
    }

    /**
     * Teste de debug - for√ßa a barra a desaparecer
     */
    forceHideBar() {
        console.log('üîß TESTE: For√ßando barra a desaparecer...');
        if (this.barraContainer) {
            this.barraContainer.style.opacity = '0';
            this.barraContainer.classList.remove('show');
            console.log('üîß Barra for√ßada a desaparecer');
        }
    }
}

// Cria inst√¢ncia global da barra de progresso
window.audioProgressBar = new AudioProgressBar();

// Exemplo de uso quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéµ Audio Progress Bar carregado e pronto para usar em TODOS os cap√≠tulos!');
    console.log('üì° Sistema de detec√ß√£o autom√°tica ativo - detecta qualquer √°udio na p√°gina');
    console.log('üëÅÔ∏è Barra aparece automaticamente quando h√° √°udio a tocar');
    
    // Exemplos de uso (funcionam em qualquer cap√≠tulo):
    
    // 1. AUTOM√ÅTICO: Basta reproduzir qualquer √°udio
    // - A barra aparece automaticamente quando o √°udio inicia
    // - A barra desaparece quando o √°udio para/termina
    // - N√£o aparece em p√°ginas de chapter
    
    // 2. MANUAL: Reproduzir √°udio espec√≠fico
    // window.audioProgressBar.playAudio('audio-cena1'); // Por ID
    // window.audioProgressBar.playAudio(0); // Por √≠ndice (primeiro √°udio)
    
    // 3. Controlo da visibilidade
    // window.audioProgressBar.showProgressBar(); // Mostrar manualmente
    // window.audioProgressBar.hideProgressBar(); // Ocultar manualmente
    
    // 4. Parar todos os √°udios (oculta a barra)
    // window.audioProgressBar.stopAllAudios();
    
    // 5. Listar √°udios dispon√≠veis na p√°gina atual
    // window.audioProgressBar.listAudios();
    
    // 6. Teste simples da barra (mostra temporariamente)
    // window.audioProgressBar.testProgress();
    
    // FUNCIONAMENTO AUTOM√ÅTICO:
    // ‚úÖ Detecta todos os elementos <audio> na p√°gina
    // ‚úÖ Barra s√≥ aparece quando h√° √°udio a tocar
    // ‚úÖ Oculta automaticamente em p√°ginas de chapter
    // ‚úÖ Funciona em cap1.html, cap2.html, cap3.html, etc.
    // ‚úÖ Transi√ß√µes suaves de aparecer/desaparecer
});

// Exporta a classe para uso em m√≥dulos (opcional)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AudioProgressBar;
}
